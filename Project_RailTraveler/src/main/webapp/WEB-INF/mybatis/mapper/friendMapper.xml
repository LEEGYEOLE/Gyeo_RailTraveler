<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="friend">

	<!--현재 시퀀스 번호를 가져오는 쿼리 
	return type : 정수형-->
	<select id="seq" resultType="Integer">
		SELECT friend_seq.nextval FROM dual
	</select>
	
	<!-- 동행게시판 게시물을 insert
	parameter Type : FriendDTO-->
	<insert id="insertFriend" parameterType="com.railer.rt.commu.friend.Friend">
		INSERT INTO friend(friendNum, userId, notice, subject, content, sDate, eDate)
		VALUES(#{friendNum}, #{userId}, #{notice}, #{subject}, #{content}, #{sDate}, #{eDate})
	</insert>
	
	<!--동행게시판의 첨부파일을 insert
	parameter Type : Friend DTO-->
	<insert id="insertFriendFile" parameterType="com.railer.rt.commu.friend.Friend">
        INSERT INTO friendFile(friendFileNum, friendNum, saveFilename,originalFilename,fileSize)
        VALUES(FRIENDF_SEQ.nextval, #{friendNum},#{saveFilename},#{originalFilename},#{fileSize})
	</insert>
	
	<!--검색 기능에 관련 된 where 조건에 관련된 sql
	전체 / 내용 / 작성일 / 제목 / 작성자-->
	<sql id="where-list">
		<choose>
			<when test="condition=='all'">	
				(INSTR(subject,#{keyword}) &gt; 0
				OR
				DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 )
			</when>
			<when test="condition=='content'">
				DBMS_LOB.INSTR(content, #{keyword}) &gt; 0
			</when>
			<when test="condition=='created'">
				(TO_CHAR(created, 'YYYY-MM-DD')=#{keyword}
				OR
				TO_CHAR(created, 'YYYYMMDD')=#{keyword})
			</when>
			<otherwise>
				INSTR(${condition},#{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>
	
		
	<select id="listFriendTop" resultType="com.railer.rt.commu.friend.Friend">
       SELECT f.friendNum,f.userId,userName,subject,content,hitCount,f.created,
            NVL(fileCount,0) fileCount 
      FROM friend f 
      JOIN member2 m2 ON f.userId=m2.userId
      LEFT OUTER JOIN (
         SELECT friendNum, COUNT(*) fileCount FROM friendFile
         GROUP BY friendNum
      ) ff On f.friendNum=ff.friendNum
      <where>
         <if test="keyword!=null and keyword!=''">
            <include refid="where-list"/>
         </if>
         and notice=1
      </where>
      ORDER BY f.friendNum DESC
   </select>
   
	
	<!--동행게시판 게시물 수를 반환
	parameter Type : map
	return type : 정수형-->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM friend f
		JOIN member2 m2 ON f.userId=m2.userId 
		<where>
			<if test="keyword!=null and keyword!=''">
				<include refid="where-list" />
			</if>
		</where>
	</select>
	
	<!--해당 범위 안의 동행게시판 게시물을 가져오는, 해당 페이지의 동행게시판 게시물 리스트
	parameter Type : map
	result Type : Friend DTO-->
	<select id="listFriend" parameterType="map" resultType="com.railer.rt.commu.friend.Friend">
      SELECT f.friendNum,f.userId,userName,subject,content,hitCount,f.created, sDate, eDate,
            NVL(fileCount,0) fileCount, NVL(replyCount,0) replyCount, NVL(bookmarkCount,0) bookmarkCount
      FROM friend f 
      JOIN member2 m2 ON f.userId=m2.userId
      LEFT OUTER JOIN (
         SELECT friendNum, COUNT(*) fileCount FROM friendFile
         GROUP BY friendNum
      ) ff On f.friendNum=ff.friendNum
      LEFT OUTER JOIN (
         SELECT friendNum, COUNT(*) replyCount FROM friendReply
         GROUP BY friendNum
      ) r On f.friendNum=r.friendNum
      LEFT OUTER JOIN (
         SELECT friendNum, COUNT(*) bookmarkCount FROM friendBookMark
         GROUP BY friendNum
      ) fb On f.friendNum=fb.friendNum
      <where>
         <if test="keyword!=null and keyword!=''">
            <include refid="where-list"/>
         </if>
      </where>
      ORDER BY f.friendNum DESC
      OFFSET #{offset} ROWS fETCH FIRST #{rows} ROWS ONLY
   </select>
	
	<!--공지사항 게시물 정보를 가져오기
	parameter Type : 정수
	result Type : Friend DTO-->
	<select id="readFriend" parameterType="Integer"  resultType="com.railer.rt.commu.friend.Friend">
		SELECT f.friendNum,f.userId,userName,subject,content,hitCount,f.created,sDate, eDate, NVL(fileCount,0) fileCount
            ,NVL(replyCount,0) replyCount, NVL(bookmarkCount,0) bookmarkCount
      FROM friend f 
      JOIN member2 m2 ON f.userId=m2.userId
      LEFT OUTER JOIN (
         SELECT friendNum, COUNT(*) fileCount FROM friendFile
         GROUP BY friendNum
      ) ff On f.friendNum=ff.friendNum
      LEFT OUTER JOIN (
         SELECT friendNum, COUNT(*) replyCount FROM friendReply
         GROUP BY friendNum
      ) r On f.friendNum=r.friendNum
      LEFT OUTER JOIN (
         SELECT friendNum, COUNT(*) bookmarkCount FROM friendBookMark
         GROUP BY friendNum
      ) fb On f.friendNum=fb.friendNum
      	WHERE f.friendNum=#{friendNum}
	</select>
	
	<!--공지사항 해당 게시물에 대한 파일 리스트 정보 가져오기
	parameter Type : 정수
	result Type : Friend DTO (uploads)-->
	<select id="listFile" parameterType="Integer" resultType="com.railer.rt.commu.friend.Friend">
   	SELECT friendFileNum, friendNum, saveFilename, originalFilename, fileSize
   	FROM friendFile
   	WHERE friendNum=#{friendNum}
   </select>
	
	<!--공지사항 해당 게시물에 대한 이전글 정보 가져오기
	parameter Type : map
	result Type : Friend DTO-->
	<select id="preReadFriend" parameterType="map" resultType="com.railer.rt.commu.friend.Friend">
      SELECT friendNum, subject,f.created ,sDate, eDate
      FROM friend f 
      JOIN member2 m2 ON f.userId=m2.userId
      <where>
         <if test="keyword!=null and keyword!=''">
            <include refid="where-list"/>
         </if>
         AND (friendNum &gt; #{friendNum})
      </where>
      ORDER BY friendNum ASC
      FETCH FIRST 1ROWS ONLY
	</select>
	
	<!--공지사항 해당 게시물에 대한 다음글 정보 가져오기
	parameter Type : map
	result Type : Friend DTO-->
	<select id="nextReadFriend" parameterType="map" resultType="com.railer.rt.commu.friend.Friend">
      SELECT friendNum, subject,f.created ,sDate, eDate
      FROM friend f 
      JOIN member2 m2 ON f.userId=m2.userId
      <where>
         <if test="keyword!=null and keyword!=''">
            <include refid="where-list"/>
         </if>
         AND (friendNum &lt; #{friendNum})
      </where>
      ORDER BY friendNum DESC
      FETCH FIRST 1ROWS ONLY
	</select>
	
	<!--해당 공지사항의 조회수 증가
	parameter Type : 공지사항번호-->
	<select id="updateHitCount" parameterType="Integer">
		UPDATE friend SET
			hitCount=hitCount+1
		WHERE friendNum=#{friendNum}
	</select>
	
	<!--해당 공지사항 파일에 대한 상세정보
	parameter Type : 공지사항 파일번호
	result Type : Friend DTO-->
	<select id="readFile" parameterType="Integer" resultType="com.railer.rt.commu.friend.Friend">
   	SELECT friendFileNum, friendNum, saveFilename, originalFilename, fileSize
   	FROM friendFile
   	WHERE friendFileNum=#{friendFileNum}
   </select>
   
	<!--공지사항 제목, 내용 수정
	parameter Type : map
	result Type : Friend DTO-->
	<update id="updateFriend" parameterType="com.railer.rt.commu.friend.Friend">
		UPDATE friend SET subject=#{subject},content=#{content}
		WHERE friendNum=#{friendNum}
	</update>
	
	<!--공지사항 삭제
	parameter Type : 정수
	result Type : Friend DTO-->
	<delete id="deleteFriend" parameterType="Integer">
		DELETE FROM friend WHERE friendNum=#{friendNum}
	</delete>
	
	<!--공지사항 게시물의 파일 삭제 (게시물 수정)
	parameter Type : map-->
	<delete id="deleteFile" parameterType="map">
		DELETE FROM friendFile WHERE ${field}=#{num}
	</delete>
	
	<!-- 동행게시판 게시물을 insert
	parameter Type : FriendDTO-->
	<insert id="insertFriendBookmark" parameterType="map">
		INSERT INTO friendBookmark(friendNum, userId)
		VALUES(#{friendNum}, #{userId})
	</insert>
	
	<!--게시물의 북마크 수를 반환
	parameter Type : map
	return type : 정수형-->
	<select id="bookmarkCount" parameterType="Integer" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM friendBookmark
		where friendNum = #{friendNum}
	</select>
	
	
</mapper>