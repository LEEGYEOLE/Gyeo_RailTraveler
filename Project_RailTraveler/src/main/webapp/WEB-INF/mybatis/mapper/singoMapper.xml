<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="singo">
	
	
	<sql id="where-list">
		<choose>
			<when test="condition == 'all' ">
			   ( INSTR(b.userId, #{keyword}) &gt; 0
		          OR 
		         INSTR(b.targetUserId, #{keyword}) &gt; 0
		          OR 
		          INSTR(b.userId, #{keyword}) &gt; 0
		          OR 
		          INSTR(b.content, #{keyword}) &gt; 0
		         ) 
		          
			</when>
			<when test="condition == 'created'">
			    ( TO_CHAR(b.created, 'YYYYMMDD') = #{keyword}
		          OR TO_CHAR(b.created, 'YYYY-MM-DD') = #{keyword} )
			</when>
			
			<when test="condition == 'reason'">
			    ( INSTR(b.content, #{keyword}) &gt; 0)
			</when>
			
			<when test="condition == 'userId'">
			    ( INSTR(b.userId, #{keyword}) &gt; 0)
			</when>
			
			<when test="condition == 'targetUserId'">
			    ( INSTR(b.targetUserId, #{keyword}) &gt; 0)
			</when>

		</choose>
		

	</sql>
	
	<sql id="where-singoCountlist">
		<choose>
			<when test="condition == 'all' ">
			   ( INSTR(targetUserId,#{keyword}) &gt; 0
		          OR 
		         INSTR(userName, #{keyword}) &gt; 0
		         ) 		          
			</when>
			<when test="condition == 'userId'">
			    ( INSTR(targetUserId,#{keyword}) &gt; 0)
			</when>
			
			<when test="condition == 'userName'">
			    ( INSTR(userName, #{keyword}) &gt; 0)
			</when>
			

	
		</choose>
	</sql>

	<insert id="singo.insertSingo" parameterType="map">
		insert into
		blame(blameNo , targetNo , targetType, targetTitle , userId , targetUserId , content , targetUrl)
		values(blame_seq.nextval, #{targetNo} ,#{targetType}, #{targetTitle} , #{userId} , #{targetUserId}, #{content} , 
		 <![CDATA[#{targetUrl}]]>)
	</insert>
	
	<select id="singo.findTargetId" parameterType="Integer" resultType="com.railer.rt.singo.Singo">
		select userId targetUserId , content targetContent from tourreply where replynum = #{targetNo}
	</select>
	
	<select id="singo.dataCount" parameterType="map" resultType="Integer">
		select nvl(count(*),0) from blame b
		
		<where>
			b.targetTitle = #{targetTitle}
		
			<if test="keyword!=null and keyword!='' ">
				and
				
				<include refid="where-list"/>
			</if>
		</where>   
	</select>
	
 	<select id="singo.singoList" parameterType="map" resultType="com.railer.rt.singo.Singo" >
       <choose>
       <when test='selected=="reply"'>
       select blameNo , targetNo, targettype, targetTitle,b.userid,targetuserid,b.content,x.content targetContent,targetUrl,b.created
       </when>
      
       <when test='selected=="board"'>
       select blameNo , targetNo, targettype, targetTitle,b.userid,targetuserid,b.content,x.subject targetContent,targeturl,b.created
       </when>
       </choose>      
      from blame b join ${targetTitle} x 
      on b.targetNo = x.${numName}      
      <where>
          targetTitle = #{targetTitle}
          
         <if test="keyword!=null and keyword!='' ">
            and <include refid="where-list"/>
         </if>
      </where>   
         OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
   </select> 
	
	<select id="singo.singoCountList" parameterType="map" resultType="com.railer.rt.singo.SingoManagment">
		select username , targetUserId ,singoCount, m2.enabled enabled
		from member2 m2 join (
		select targetUserId, nvl(count(*),0) singoCount from blame 
		group by targetUserId) x on m2.userid = x.targetUserId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-singoCountlist"/>
			</if>
		</where>
		order by singoCount desc
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<select id="singo.singoCount" parameterType="map" resultType="Integer">
	select nvl(count(*),0) singoListCount from(
	select username , targetUserId ,singoCount
		from member2 m2 join (
		select targetUserId, nvl(count(*),0) singoCount from blame 
		group by targetUserId) x on m2.userid = x.targetUserId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-singoCountlist"/>
			</if>
		</where>
		order by singoCount desc

)
</select>

	<!--5회 이상 사용자 정지 매기기-->
	<update id="singo.restrictUserId" parameterType="map">
	<choose>
	<when test='userState=="unabled"'>
		update member2 set enabled = 0 where userId = #{targetUserId}
	</when>
	<otherwise>
		update member2 set enabled = 1 where userId = #{targetUserId}
	</otherwise>
	</choose>
	</update>
	

</mapper>