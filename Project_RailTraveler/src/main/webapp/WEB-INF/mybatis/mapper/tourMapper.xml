<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tour">

	<select id="tourList" parameterType="map" resultType="com.railer.rt.tour.Tour">
        select nvl(a.userid,'no') likeuserId,loc.locnum, loc.locName ,t.tournum , t.stanum, t.detailcatenum, t.name, t.tel , t.address ,t.content, t.longitude,t.latitude, t.hitcount,tf.imagefilename,tc.catenum,tc.cateName
		from tour t join tourfile tf on t.tournum = tf.tournum
		join detailtourcategory dtc on t.detailcatenum = dtc.detailcatenum
		join tourcategory tc on dtc.catenum = tc.catenum 
        join station st on st.stanum = t.stanum
        join location loc on loc.locnum =st.locnum
        left join ( select * from tourbookmark tbm where tbm.userid =#{userId}) a  on t.tournum = a.tournum
		<where>
			<if test='name =="list"'>
			 loc.locNum = #{locNum}
	 		</if>
			
			<if test="cateNum !=0">
				and tc.catenum = #{cateNum} 
			</if>
			
			<if test='name =="mybookmark"'>
				and a.userid =#{userId}
			</if>
			
			
			
		</where>
		and ROWNUM <![CDATA[ < ]]>  1000
		ORDER BY t.tournum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{items} ROWS ONLY
	</select>
	
	<select id="tourCategoryList" resultType="com.railer.rt.tour.Tour">	
	 select cateNum , cateName from tourcategory
	</select>
	
	
	<select id="dataCount" parameterType="map" resultType="Integer">	
	 	select nvl(count(*),0)
		from tour t join tourfile tf on t.tournum = tf.tournum
		join detailtourcategory dtc on t.detailcatenum = dtc.detailcatenum
		join tourcategory tc on dtc.catenum = tc.catenum 
        join station st on st.stanum = t.stanum
        join location loc on loc.locnum =st.locnum

		<where>
			
			<choose>

				<when test='name =="list"'>

					loc.locNum = #{locNum}
					
					<if test="cateNum !=0">
						and tc.catenum = #{cateNum} 
					</if>

				</when>

				<otherwise>

 				t.stanum =#{staNum} and t.detailcatenum=#{detailcateNum}		

				</otherwise>

			</choose>
		</where>

	</select>
	
	<select id="myBookMarkCount" parameterType="map" resultType="Integer">	
	    select nvl(count(*),0) from tour t join tourbookmark tbm on t.tournum = tbm.tournum
        where userid =#{userId}
	</select>
	
	
	<select id="localStation" parameterType="Integer" resultType="com.railer.rt.tour.Tour">
		select staName, staNum from station where locnum = #{locNum}
	</select>
	
	<select id="detailTourCategory" parameterType="map" resultType="com.railer.rt.tour.Tour">
	 select detailcateNum, detailcateName from detailtourcategory where catenum =#{cateNum}
	</select>
	
	<select id="detailTourList" parameterType ="map" resultType="com.railer.rt.tour.Tour">
	select t.tournum , t.stanum, t.detailcatenum, t.name, t.tel , t.address ,t.content, t.longitude,t.latitude, t.hitcount,tf.imagefilename,tc.catenum 
	from tour t 
	join tourfile tf on tf.tournum =t.tournum
	join station s on t.stanum = s.stanum 
	join detailtourcategory d on t.detailcatenum = d.detailcatenum 
	join tourcategory tc on d.catenum = tc.catenum 
	where t.stanum =#{staNum} and t.detailcatenum=#{detailcateNum}
	ORDER BY t.tournum DESC
	OFFSET #{offset} ROWS FETCH FIRST #{items} ROWS ONLY
	</select>
	
	<insert id="likeTour" parameterType="map">
		insert into tourbookmark(tournum,userId) values (#{tourNum},#{userId})
	</insert>
	
	<delete id="cancelLikeTour" parameterType="map">
		delete from tourbookmark
		<where>
			<choose>
			
				<when test='mode == "deleteList"'>
					userId =#{userId} and tournum In 
						       <foreach collection="deleteListArray" item="item" index="index" separator="," open="(" close=")">
           									 ${item}
        						</foreach>			
				</when>
				
				<otherwise>
					tournum = #{tourNum} and userId =#{userId}
				</otherwise>	
			</choose>
	
		</where>
	
	</delete>
	
	<select id="checkLike" parameterType="map" resultType="Integer">
		select nvl(count(*),0)  from tourbookmark where tournum =#{tourNum} and userId =#{userId}
	</select>
	
	<select id="initLikeMark" parameterType="map" resultType="com.railer.rt.tour.Tour">
		select t.tournum , t.stanum  from tourbookmark tbm join tour t
        on tbm.tournum = t.tournum where userId =#{userId}
	</select>

	<select id="hitContentList" parameterType="map" resultType="com.railer.rt.tour.Tour">
			select tb.tournum tournum, likecount , ttf.imagefilename imagefilename from
			(select  tf.tournum tournum, nvl(count(*),0) likeCount from tour t
			join tourfile tf on t.tournum = tf.tournum
			join tourbookmark tbm on tbm.tournum =t.tournum
			join station s  on s.stanum =t.stanum
			join location loc on s.locnum = loc.locnum
			where s.locnum =#{locNum}
			group by tf.tournum
			order by likeCount desc) tb join tourfile ttf
			on tb.tournum = ttf.tournum 
			where rownum <![CDATA[<]]>10
	</select>
	
	<select id="readDetailTour" parameterType="Integer" resultType="com.railer.rt.tour.Tour">
        select t.tourNum,tf.imagefilename, t.stanum,t.detailcateNum,name,tel,address,content,longitude,latitude,hitCount,detailcatename 
        from tour t 
        join detailtourcategory dtc on dtc.detailcatenum =t.detailcatenum 
        join tourfile tf on t.tournum = tf.tournum    
		 where t.tourNum = #{tourNum}		
	</select>
	
	<!-- 리플 댓글  추가하기-->
	<insert id="insertReply" parameterType="com.railer.rt.tour.TourReply">
		INSERT INTO TourReply(replyNum, tournum, userId, content, answer)
			VALUES (tourreply_seq.NEXTVAL, #{tourNum}, #{userId}, #{content}, #{answer})
	</insert>
	
	<!--리플 댓글 카운터-->
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM tourreply
		WHERE tourNum=#{tourNum} AND answer=0
	</select>
	
	<!--댓글 리스트-->
	<select id="replylist" parameterType="map" resultType="com.railer.rt.tour.TourReply">
	    SELECT nvl(count,0) likeCount,tr.replyNum , tr.tourNum, tr.userId, CONTENT, CREATED , ANSWER ,decode(a.userid, null, 'no',a.userid) likeuserId 
        FROM tourreply tr
        left join (
        select * from tourreplylike
        where userid =  #{userId}
        ) a on tr.replynum = a.replynum
        left join ( 
        select replynum, nvl(count(*),0) count from tourreplylike group by replynum
        ) b on b.replynum = tr.replynum 
		WHERE tr.tourNum=#{tourNum} and answer =0
		ORDER BY tr.replyNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	

	
	<!-- 댓글의 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.railer.rt.tour.TourReply">
		SELECT t.replyNum, t.tourNum, t.userId, userName, t.content, t.created, t.answer
		FROM tourreply t
		JOIN member2 m ON t.userId = m.userId
		WHERE answer = #{answer}
		ORDER BY t.replyNum DESC
	</select>
	
	<!--리플 카운터-->
	<select id="replyAnswerCount" parameterType="Integer" resultType="Integer">
	select nvl(count(*),0) answerCount from tourreply where answer =#{answer}
	</select>
	
		<!-- 댓글 및 답글 삭제 -->
	<delete id="deleteReply" parameterType="map" >
		
		DELETE FROM tourreply WHERE 
		
		<if test="mode=='reply' ">
			replyNum IN (
				SELECT replyNum FROM tourreply
					START WITH replyNum=#{replyNum}
					CONNECT BY PRIOR replyNum = answer         
			)
		</if>
		<if test="mode=='answer' ">
			replyNum = #{replyNum}
		</if>
	</delete>
	
	<delete id="deleteReplyLike" parameterType="map">
		delete from tourreplylike where replyNum =#{replyNum}
	</delete>
	<!--댓글 좋아요 처리-->
	
	<insert id="replyLike" parameterType="map">
		insert into tourreplylike(replyNum,userId) values (#{replyNum},#{userId})
	</insert>
	
	<delete id="replyLikeCancel" parameterType="map">
		delete from tourreplylike where replyNum =#{replyNum} and userId =#{userId}
	</delete>
	
	<select id="checkReplyLike" parameterType="map" resultType="Integer">
		select nvl(count(*),0)  from tourreplylike where replyNum =#{replyNum} and userId =#{userId}
	</select>
	




	
</mapper>