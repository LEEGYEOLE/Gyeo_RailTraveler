<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="plan">
	<sql id="where-list">
		<choose>
			<when test="condition=='all'">
				(INSTR(userName,#{keyword}) &gt; 0
				OR
				INSTR(staName, #{keyword}) &gt; 0
				)
			</when>
			<when test="condition=='writer'">
				INSTR(userName,#{keyword}) &gt; 0
			</when>
			<when test="condition=='station'">
				INSTR(staName, #{keyword}) &gt; 0
			</when>
			<when test="condition=='sDate'">
				 ( TO_CHAR(p.sDate, 'YYYYMMDD') = #{keyword}
		          OR TO_CHAR(p.sDate, 'YYYY-MM-DD') = #{keyword} )
			</when>
			<otherwise>
			    INSTR(${condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>
	
   <!-- planNum 시퀀스번호 -->
   <select id="planSeq" resultType="Integer">
   	SELECT plan_seq.NEXTVAL FROM dual
   </select>
   
   <!-- detailPlanNum 시퀀스번호 -->
   <select id="detailPlanSeq" resultType="Integer">
   	SELECT dp_seq.NEXTVAL FROM dual
   </select>
   
   <!-- 검색한 역 리스트  -->
   <select id="listStation" resultType="com.railer.rt.plan.Station">
   	SELECT staNum, locNum, staName, staTel, staAddress, imageFilename
   	FROM station
   	<where>
		<if test="keyword!=null and keyword!=''">
			INSTR(staName, #{keyword}) &gt; 0
		</if>
		<if test="locNum!=0">
			AND locNum=#{locNum}
		</if>
	</where>
   </select>
   
   <!-- 검색한 역 개수 -->
   <select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM station s
		JOIN location l on s.locNum=l.locNum
		<where>
			<if test="locNum!=0">
				l.locNum=#{locNum}
			</if>
		</where>   
	</select>
	
	<!-- 세부계획 모달창에서 대분류 카테고리 뿌리기 -->
	<select id="listCategory" resultType="com.railer.rt.plan.Tour">
		SELECT t.cateNum, cateName
		FROM tourcategory t
	</select>
	
	<!-- 세부계획 모달창에서 소분류 카테고리 뿌리기 -->
	<select id="listDetailCategory" parameterType="map" resultType="com.railer.rt.plan.Tour">
		SELECT t.cateNum, detailcateNum, detailcateName
		FROM tourcategory t
		JOIN detailtourcategory dt ON t.cateNum=dt.cateNum
		WHERE t.cateNum=#{cateNum}
	</select>
	
	<!-- 몇일차 여행인지 추가하기(insert 1단계) -->
	<insert id="insertPlan" parameterType="map">
		INSERT INTO plan(planNum, userId, ticketDay, sDate, title, imageFileName)
			VALUES(#{planNum}, #{userId}, #{ticketDay}, #{sDate}, #{title, jdbcType=VARCHAR}, #{imageFileName, jdbcType=VARCHAR})
	</insert>
	
	<!-- 몇일차의 역과 세부계획 추가하기(insert 2단계) -->
	<insert id="insertDetailPlan" parameterType="map">
		INSERT INTO detailPlan(detailPlanNum, planNum, staNum, nthDay)
			VALUES(#{detailPlanNum}, #{planNum}, #{staNum}, #{nthDay})
	</insert>
	
	<!-- 세부계획 내용 저장하기(insert 3단계)  -->
	<insert id="insertMoreDetailPlan" parameterType="map">
		INSERT INTO moreDetailPlan(mdpNum,detailPlanNum,cateNum,name,tel,address,longitude,latitude,memo,sTime,eTime,price)
			VALUES(mdp_seq.NEXTVAL,#{detailPlanNum},#{cateNum},#{name},#{tel, jdbcType=VARCHAR},#{address, jdbcType=VARCHAR},#{longitude, jdbcType=VARCHAR},#{latitude, jdbcType=VARCHAR}
			,#{memo, jdbcType=VARCHAR},#{sTime, jdbcType=VARCHAR},#{eTime, jdbcType=VARCHAR},#{price, jdbcType=VARCHAR})
	</insert>
	
	<!-- 세부계획 모달에서 장소 검색 -->
	<select id="listTour" parameterType="map" resultType="com.railer.rt.plan.Tour">
		SELECT t.tourNum, staNum, detailcateNum, name, tel, address, imagefilename
		FROM tour t
		JOIN tourFile tf ON t.tourNum=tf.tourNum
		<where>
		detailcateNum=#{detailcateNum} AND staNum=#{staNum}
		<if test="keyword!='' and keyword!=null">
			AND INSTR(name, #{keyword}) &gt; 0
		</if>
		</where>
      ORDER BY tourNum DESC
      OFFSET #{offset} ROWS fETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<!-- 검색한 장소 개수 -->
   <select id="placeDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM tour t
		<where>
		detailcateNum=#{detailcateNum} AND staNum=#{staNum}
		AND INSTR(name, #{keyword}) &gt; 0
		</where>     
	</select>
	
	<!-- 이미지 파일 업데이트(라고 말하지만 사실상 등록) -->
	<update id="updateImage" parameterType="com.railer.rt.plan.Plan">
		UPDATE plan SET imageFileName=#{imageFileName}
		WHERE planNum=#{planNum}
	</update>
	
	<!-- 세부계획 내용 삭제(나중에 데이터 정리하고 제약조건 걸어서 plan만 지워도 자식새끼들까지 다 지워지게 만들 예정) -->
	<delete id="deletePlan" parameterType="map">
		DELETE FROM plan WHERE planNum=#{planNum}
	</delete>
	
<!-- 추천코스짜는중!!!!!!!!!!!!!!	 -->
	<select id="listPlan" parameterType="map" resultType="com.railer.rt.plan.Plan">
		select p.ticketDay, p.planNum, p.userId, userName writer,p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd') eDate, 
			title, p.imageFileName, LISTAGG(staName, ',') WITHIN GROUP(ORDER BY p.planNum) staName
		from plan p
		join detailPlan d on p.planNum = d.planNum
        join member2 m on m.userId = p.userId
		join station s on d.staNum = s.staNum
		<where>
			<if test="keyword!=null and keyword!=''">
				AND
				<include refid="where-list" />
			</if>
			and p.userId='admin'
		</where>
		GROUP BY p.ticketDay, p.planNum, p.userId, userName, p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd'), title, p.imageFileName	
		order by p.planNum desc
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>

	<!-- 추천코스 리스트 개수 -->
	<select id="dataPlanCount" parameterType="map" resultType="Integer">
		select nvl(count(*),0) 
        from(
            select p.planNum
            from plan p
            join detailPlan d on p.planNum = d.planNum
            join member2 m on m.userId = p.userId
            join station s on d.staNum = s.staNum
		<where>
			<if test="keyword!=null and keyword!=''">
				AND
				<include refid="where-list" />
			</if>
			and p.userId='admin'
		</where>
		 GROUP BY p.planNum)
	</select>
	
	<select id="readPlan" parameterType="Integer" resultType="com.railer.rt.plan.Plan">
		select planNum,sDate, to_char((to_date(sDate) + ticketDay),'yyyy-mm-dd') eDate, title, userId,ticketDay
		from plan p
		where planNum = #{planNum}
	</select>
	
	<select id="readStation" parameterType="map" resultType="com.railer.rt.plan.Plan">
		select to_char(to_date(p.sDate)+nthDay-1,'yyyy-mm-dd') sDate, to_char((to_date(p.sDate) + nthDay+1),'yyyy-mm-dd') eDate,
			 nthDay, s.staNum,s.locNum,staName,s.imageFileName, latitude, longitude, p.planNum
		from plan p
		join detailPlan d on p.planNum = d.planNum
		join station s on d.staNum = s.staNum
        join location l on s.locNum = l.locNum
		where p.planNum = #{planNum}
        order by nthDay
	</select>
	
	<select id="stationCount" parameterType="Integer" resultType="Integer">
		select nvl(count(*),0) from plan p
		join detailPlan d on p.planNum = d.planNum
		join station s on d.staNum = s.staNum
		where p.planNum = #{planNum}
        order by nthDay
	</select>
	
	<select id="readDetail" parameterType="map" resultType="com.railer.rt.plan.Plan">
	
	 select p.planNum, to_char(to_date(p.sDate)+nthDay-1,'yyyy-mm-dd') sDate, 
	    	cateName, m.name,memo,LPAD(sTime, 3) sTime,LPAD(eTime, 3) eTime,price, d.detailPlanNum, d.stanum,nthDay, tf.imageFileName
		from plan p
		join detailPlan d on p.planNum = d.planNum
		join moreDetailPlan m on d.detailPlanNum = m.detailPlanNum
		join tourCategory t on m.cateNum = t.cateNum
		join (
        select name, tourNum, staNum from tour)
        tt on tt.name = m.name and d.staNum=tt.staNum
        join tourfile tf on tt.tourNum = tf.tourNum
		where p.planNum = #{planNum}
		order by nthDay,  d.detailPlanNum
		
		
<!-- 		select p.planNum, to_char(to_date(p.sDate)+nthDay-1,'yyyy-mm-dd') sDate,  -->
<!-- 	    	cateName, name,memo,LPAD(sTime, 3) sTime,LPAD(eTime, 3) eTime,price, imageFileName, d.detailPlanNum, d.stanum,nthDay -->
<!-- 		from plan p -->
<!-- 		join detailPlan d on p.planNum = d.planNum -->
<!-- 		join moreDetailPlan m on d.detailPlanNum = m.detailPlanNum -->
<!-- 		join tourCategory t on m.cateNum = t.cateNum -->
<!-- 		where p.planNum = #{planNum} -->
<!-- 		order by nthDay,  d.detailPlanNum -->
		
		
	</select>
	
	<select id="calPrice" parameterType="Map" resultType="Integer">
		select nvl(sum(price),0)
        from plan p
		join detailPlan d on p.planNum = d.planNum
		join moreDetailPlan m on d.detailPlanNum = m.detailPlanNum
		join tourCategory t on m.cateNum = t.cateNum
		where p.planNum = #{planNum} and cateName= #{cateName}
		order by nthDay
	</select>
	
	
	<!-- 북마크 -->
	<insert id="likePlan" parameterType="map">
		insert into planbookmark(planNum,userId) values (#{planNum},#{userId})
	</insert>
	
	<insert id="disLikePlan" parameterType="map">
		delete from planbookmark where planNum = #{planNum} and userId= #{userId}
	</insert>
	
	<select id="checkLike" parameterType="map" resultType="Integer">
		select nvl(count(*),0)  from planbookmark where planNum = #{planNum} and userId= #{userId}
	</select>
	
	<select id="listBookmark" parameterType="map" resultType="com.railer.rt.plan.Plan" >
		select p.planNum, userName writer,title, p.sDate,
		    to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd') eDate, 
		    title, p.imageFileName,LISTAGG(staName, ',') WITHIN GROUP(ORDER BY p.planNum) staName
		from planbookmark b
		join plan p on p.planNum = b.planNum
		join detailPlan d on p.planNum = d.planNum
		join station s on d.staNum = s.staNum
		join member2 m on m.userId = p.userId
		<where>
			b.userId = #{userId}
			<if test="keyword!=null and keyword!=''">
				AND
				<include refid="where-list" />
			</if>
		</where>
		group by p.planNum, userName, p.sDate,title, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd'),  p.imageFileName
		order by p.planNum
		offset #{offset} rows fetch first #{rows} rows only
	</select>
	
	<select id="countBookmark" parameterType="map" resultType="Integer">
		select nvl(count(*),0) from planbookmark b
		join plan p on p.planNum = b.planNum
		join detailPlan d on p.planNum = d.planNum
		join station s on d.staNum = s.staNum
		join member2 m on m.userId = p.userId
		<where>
			b.userId = #{userId}
			<if test="keyword!=null and keyword!=''">
				AND
				<include refid="where-list" />
			</if>
		</where>
	</select>
	
	<!-- 내가 작성한 플랜 -->
	<select id="listMyPlan" parameterType="map" resultType="com.railer.rt.plan.Plan">
		select p.planNum, p.userId, userName writer,p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd') eDate, 
			title, p.imageFileName, LISTAGG(staName, ',') WITHIN GROUP(ORDER BY p.planNum) staName
		from plan p
		join detailPlan d on p.planNum = d.planNum
        join member2 m on m.userId = p.userId
		join station s on d.staNum = s.staNum
       	<where>
			p.userId = #{userId}
			<if test="keyword!=null and keyword!=''">
				AND
				<include refid="where-list" />
			</if>
		</where>
        GROUP BY p.planNum, p.userId, userName, p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd'), title, p.imageFileName	
		order by p.planNum
	</select>
	
	<select id="countMyPlan" parameterType="map" resultType="Integer">
		select nvl(count(*),0) from plan p
		join detailPlan d on p.planNum = d.planNum
        join member2 m on m.userId = p.userId
		join station s on d.staNum = s.staNum
		<where>
			p.userId = #{userId}
			<if test="keyword!=null and keyword!=''">
				AND
				<include refid="where-list" />
			</if>
		</where>
	</select>
	
	<!-- 	메인 친구와의 플랜 리스트 4개 (최신순) -->
	<select id="mainFriendPlanList" resultType="com.railer.rt.plan.Plan">
		select a.* from (select nvl(bmcnt,0) bmcnt, p.ticketDay, p.planNum, p.userId, userName writer,p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd') eDate, 
			title, p.imageFileName, LISTAGG(staName, ',') WITHIN GROUP(ORDER BY p.planNum) staName
		from plan p
		join detailPlan d on p.planNum = d.planNum
        join member2 m on m.userId = p.userId
		join station s on d.staNum = s.staNum
		left outer join (select count(*) bmcnt,plannum from planbookmark group by plannum) pb on pb.plannum = p.plannum
		where p.userId!='admin'
		GROUP BY bmcnt,p.ticketDay, p.planNum, p.userId, userName, p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd'), title, p.imageFileName	
		order by bmcnt desc, p.plannum desc)a where rownum<![CDATA[<]]>10
	</select>
	
	
	<!-- 	메인 추천코스 리스트 4개 (최신순) -->
	<select id="mainListPlan" resultType="com.railer.rt.plan.Plan">
		select a.* from(
        select p.ticketDay, p.planNum, p.userId, userName writer,p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd') eDate, 
			title, p.imageFileName, LISTAGG(staName, ',') WITHIN GROUP(ORDER BY p.planNum) staName
		from plan p
		join detailPlan d on p.planNum = d.planNum
        join member2 m on m.userId = p.userId
		join station s on d.staNum = s.staNum
		where p.userId='admin'
		GROUP BY p.ticketDay, p.planNum, p.userId, userName, p.sDate, to_char((to_date(p.sDate) + ticketDay),'yyyy-mm-dd'), title, p.imageFileName	
		order by p.planNum)a where rownum <![CDATA[<]]>5
	</select>
	
	
</mapper>